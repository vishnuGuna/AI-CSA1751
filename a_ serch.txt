from heapq import heappop, heappush
def a_star_search(graph, start, goal, h):
    open_set = [(0, start)]
    g_cost = {start: 0}
    came_from = {}
    while open_set:
        current = heappop(open_set)[1]
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]
        for neighbor, cost in graph[current]:
            tentative_g = g_cost[current] + cost
            if neighbor not in g_cost or tentative_g < g_cost[neighbor]:
                g_cost[neighbor] = tentative_g
                f_cost = tentative_g + h(neighbor, goal)
                heappush(open_set, (f_cost, neighbor))
                came_from[neighbor] = current
    return None  
def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])
if __name__ == "__main__":
    graph = {
        (0, 0): [((1, 0), 1), ((0, 1), 1)],
        (1, 0): [((0, 0), 1), ((1, 1), 1)],
        (0, 1): [((0, 0), 1), ((1, 1), 1)],
        (1, 1): [((1, 0), 1), ((0, 1), 1), ((2, 2), 1)],
        (2, 2): [((1, 1), 1)]
    }
    
    start_node = (0, 0)
    goal_node = (2, 2)
    print("A* Search Path:", a_star_search(graph, start_node, goal_node, heuristic))
