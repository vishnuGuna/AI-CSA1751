import heapq

class PuzzleState:
    def __init__(self, board, parent=None, move="", g=0, h=0):
        self.board = board
        self.parent = parent
        self.move = move
        self.g = g
        self.h = h
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f

def manhattan_distance(board):
    distance = 0
    goal = {(0, 0): 1, (0, 1): 2, (0, 2): 3,
            (1, 0): 4, (1, 1): 5, (1, 2): 6,
            (2, 0): 7, (2, 1): 8, (2, 2): 0}
    for i in range(3):
        for j in range(3):
            value = board[i][j]
            if value != 0:
                goal_x, goal_y = [(k, l) for (k, l), v in goal.items() if v == value][0]
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance

def get_neighbors(board):
    neighbors = []
    empty = [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0][0]
    i, j = empty
    directions = [('Up', (i - 1, j)), ('Down', (i + 1, j)), ('Left', (i, j - 1)), ('Right', (i, j + 1))]
    for direction, (x, y) in directions:
        if 0 <= x < 3 and 0 <= y < 3:
            new_board = [row[:] for row in board]
            new_board[i][j], new_board[x][y] = new_board[x][y], new_board[i][j]
            neighbors.append((direction, new_board))
    return neighbors

def astar(start):
    open_list = []
    closed_set = set()
    start_state = PuzzleState(start, g=0, h=manhattan_distance(start))
    heapq.heappush(open_list, start_state)

    while open_list:
        current_state = heapq.heappop(open_list)

        if current_state.h == 0:
            solution = []
            while current_state.parent:
                solution.append(current_state.move)
                current_state = current_state.parent
            return solution[::-1]

        closed_set.add(tuple(map(tuple, current_state.board)))

        for move, neighbor in get_neighbors(current_state.board):
            neighbor_state = PuzzleState(neighbor, parent=current_state, move=move,
                                         g=current_state.g + 1, h=manhattan_distance(neighbor))

            if tuple(map(tuple, neighbor)) not in closed_set:
                heapq.heappush(open_list, neighbor_state)

    return None

start_board = [[2, 8, 3], [1, 6, 4], [7, 0, 5]]
solution = astar(start_board)
print("Solution moves:", solution)
